//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   float4 viewPosition;               // Offset:    0 Size:    16
//   row_major float4x4 viewProjection; // Offset:   16 Size:    64 [unused]
//   float4 ambientLightColor;          // Offset:   80 Size:    16
//   
//   struct DirectionalLightData
//   {
//       
//       float4 direction;              // Offset:   96
//       float4 color;                  // Offset:  112
//
//   } directionalLightData;            // Offset:   96 Size:    32
//   row_major float4x4 world;          // Offset:  128 Size:    64 [unused]
//
// }
//
// cbuffer SHADOWMAP_CONSTANT_BUFFER
// {
//
//   row_major float4x4 lightViewProjection;// Offset:    0 Size:    64 [unused]
//   float3 shadowColor;                // Offset:   64 Size:    12
//   float shadowBias;                  // Offset:   76 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseMapSamplerState            sampler      NA          NA             s0      1 
// shadowMapSamplerState             sampler      NA          NA             s1      1 
// diffuseMap                        texture  float4          2d             t0      1 
// shadowMap                         texture  float4          2d             t2      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
// SHADOWMAP_CONSTANT_BUFFER         cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 1   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_constantbuffer CB3[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.worldPosition.x; v1.y <- pin.worldPosition.y; v1.z <- pin.worldPosition.z; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
//   v3.x <- pin.texcoord.x; v3.y <- pin.texcoord.y; 
//   v4.x <- pin.color.x; v4.y <- pin.color.y; v4.z <- pin.color.z; v4.w <- pin.color.w; 
//   v5.x <- pin.shadowTexcoord.x; v5.y <- pin.shadowTexcoord.y; v5.z <- pin.shadowTexcoord.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 13 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\PhongPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v4.xyzw  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z; r0.w <- diffuseColor.w

#line 15
dp3 r1.x, v2.xyzx, v2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 16
dp3 r1.w, cb0[6].xyzx, cb0[6].xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, cb0[6].xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z

#line 17
mov r3.xyz, -v1.xyzx
add r3.xyz, r3.xyzx, cb0[0].xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- E.x; r3.y <- E.y; r3.z <- E.z

#line 20
itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- ka.x; r4.y <- ka.y; r4.z <- ka.z

#line 21
itof r5.xyz, l(1, 1, 1, 0)  // r5.x <- kd.x; r5.y <- kd.y; r5.z <- kd.z

#line 26
mul r4.xyz, r4.xyzx, cb0[5].xyzx  // r4.x <- ambient.x; r4.y <- ambient.y; r4.z <- ambient.z

#line 29
nop 
mov r1.xyz, r1.xyzx
mov r2.xyz, r2.xyzx
mov r6.xyz, cb0[7].xyzx
mov r5.xyz, r5.xyzx

#line 25 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\ShadingFunctions.hlsli"
mov r7.xyz, -r2.xyzx
dp3 r1.w, r1.xyzx, r7.xyzx
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)  // r1.w <- power

#line 26
mul r6.xyz, r1.wwww, r6.xyzx
mul r6.xyz, r5.xyzx, r6.xyzx  // r6.x <- <CalcLambert return value>.x; r6.y <- <CalcLambert return value>.y; r6.z <- <CalcLambert return value>.z

#line 29 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\PhongPS.hlsl"
mov r6.xyz, r6.xyzx  // r6.x <- directionalDiffuse.x; r6.y <- directionalDiffuse.y; r6.z <- directionalDiffuse.z

#line 30
nop 
mov r1.xyz, r1.xyzx
mov r2.xyz, r2.xyzx
mov r3.xyz, -r3.xyzx
mov r7.xyz, cb0[7].xyzx
mov r5.xyz, r5.xyzx

#line 41 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\ShadingFunctions.hlsli"
dp3 r1.w, r2.xyzx, r1.xyzx
add r1.w, r1.w, r1.w
mov r1.w, -r1.w
mul r1.xyz, r1.wwww, r1.xyzx
add r1.xyz, r2.xyzx, r1.xyzx  // r1.x <- R.x; r1.y <- R.y; r1.z <- R.z

#line 42
mov r2.xyz, -r3.xyzx
dp3 r1.x, r2.xyzx, r1.xyzx
itof r1.y, l(0)
max r1.x, r1.y, r1.x  // r1.x <- power

#line 43
itof r1.y, l(128)
log r1.x, r1.x
mul r1.x, r1.x, r1.y
exp r1.x, r1.x  // r1.x <- power

#line 45
mul r1.xyz, r1.xxxx, r7.xyzx
mul r1.xyz, r5.xyzx, r1.xyzx  // r1.x <- <CalcPhongSpeculer return value>.x; r1.y <- <CalcPhongSpeculer return value>.y; r1.z <- <CalcPhongSpeculer return value>.z

#line 30 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\PhongPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- directionalSpecular.x; r1.y <- directionalSpecular.y; r1.z <- directionalSpecular.z

#line 33
nop 
nop 
nop 
mov r1.w, v5.z
mov r2.xyz, cb3[4].xyzx
mov r2.w, cb3[4].w

#line 43 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\ShadowmapFunctions.hlsli"
sample_indexable(texture2d)(float,float,float,float) r3.x, v5.xyxx, t2.xyzw, s1
mov r3.x, r3.x  // r3.x <- depth

#line 46
mov r3.x, -r3.x
add r1.w, r1.w, r3.x
ge r1.w, r2.w, r1.w
movc r1.w, r1.w, l(1.000000), l(0)  // r1.w <- shadow

#line 48
itof r3.xyz, l(1, 1, 1, 0)
mov r5.xyz, -r2.xyzx
add r3.xyz, r3.xyzx, r5.xyzx
mul r3.xyz, r1.wwww, r3.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <CalcShadowColor return value>.x; r2.y <- <CalcShadowColor return value>.y; r2.z <- <CalcShadowColor return value>.z

#line 33 "C:\Users\2210131\Desktop\github\MyProduction2\HLSL\PhongPS.hlsl"
mov r2.xyz, r2.xyzx  // r2.x <- shadow.x; r2.y <- shadow.y; r2.z <- shadow.z

#line 35
mul r3.xyz, r2.xyzx, r6.xyzx  // r3.x <- directionalDiffuse.x; r3.y <- directionalDiffuse.y; r3.z <- directionalDiffuse.z

#line 36
mul r1.xyz, r1.xyzx, r2.xyzx

#line 38
mov r4.xyz, r4.xyzx  // r4.x <- color.x; r4.y <- color.y; r4.z <- color.z
mov r0.w, r0.w  // r0.w <- color.w

#line 39
mul r0.xyz, r0.xyzx, r3.xyzx
add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 40
add r0.xyz, r1.xyzx, r0.xyzx

#line 44
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 78 instruction slots used
